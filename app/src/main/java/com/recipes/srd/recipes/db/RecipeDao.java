package com.recipes.srd.recipes.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECIPE".
*/
public class RecipeDao extends AbstractDao<Recipe, Void> {

    public static final String TABLENAME = "RECIPE";

    /**
     * Properties of entity Recipe.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", false, "ID");
        public final static Property Name_Gujrati = new Property(1, String.class, "name_Gujrati", false, "NAME__GUJRATI");
        public final static Property Name_Hindi = new Property(2, String.class, "name_Hindi", false, "NAME__HINDI");
        public final static Property Name_English = new Property(3, String.class, "name_English", false, "NAME__ENGLISH");
        public final static Property Image = new Property(4, String.class, "image", false, "IMAGE");
    }


    public RecipeDao(DaoConfig config) {
        super(config);
    }
    
    public RecipeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECIPE\" (" + //
                "\"ID\" INTEGER NOT NULL ," + // 0: id
                "\"NAME__GUJRATI\" TEXT," + // 1: name_Gujrati
                "\"NAME__HINDI\" TEXT," + // 2: name_Hindi
                "\"NAME__ENGLISH\" TEXT," + // 3: name_English
                "\"IMAGE\" TEXT);"); // 4: image
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECIPE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Recipe entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name_Gujrati = entity.getName_Gujrati();
        if (name_Gujrati != null) {
            stmt.bindString(2, name_Gujrati);
        }
 
        String name_Hindi = entity.getName_Hindi();
        if (name_Hindi != null) {
            stmt.bindString(3, name_Hindi);
        }
 
        String name_English = entity.getName_English();
        if (name_English != null) {
            stmt.bindString(4, name_English);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(5, image);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Recipe entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name_Gujrati = entity.getName_Gujrati();
        if (name_Gujrati != null) {
            stmt.bindString(2, name_Gujrati);
        }
 
        String name_Hindi = entity.getName_Hindi();
        if (name_Hindi != null) {
            stmt.bindString(3, name_Hindi);
        }
 
        String name_English = entity.getName_English();
        if (name_English != null) {
            stmt.bindString(4, name_English);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(5, image);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Recipe readEntity(Cursor cursor, int offset) {
        Recipe entity = new Recipe( //
            cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name_Gujrati
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name_Hindi
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name_English
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // image
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Recipe entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setName_Gujrati(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName_Hindi(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName_English(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Recipe entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Recipe entity) {
        return null;
    }

    @Override
    public boolean hasKey(Recipe entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
