package com.recipes.srd.recipes.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UPDATE_CHECK".
*/
public class UpdateCheckDao extends AbstractDao<UpdateCheck, Void> {

    public static final String TABLENAME = "UPDATE_CHECK";

    /**
     * Properties of entity UpdateCheck.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", false, "ID");
        public final static Property Mid = new Property(1, int.class, "mid", false, "MID");
        public final static Property Sid = new Property(2, int.class, "sid", false, "SID");
    }


    public UpdateCheckDao(DaoConfig config) {
        super(config);
    }
    
    public UpdateCheckDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UPDATE_CHECK\" (" + //
                "\"ID\" INTEGER NOT NULL ," + // 0: id
                "\"MID\" INTEGER NOT NULL ," + // 1: mid
                "\"SID\" INTEGER NOT NULL );"); // 2: sid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UPDATE_CHECK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UpdateCheck entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getMid());
        stmt.bindLong(3, entity.getSid());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UpdateCheck entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getMid());
        stmt.bindLong(3, entity.getSid());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public UpdateCheck readEntity(Cursor cursor, int offset) {
        UpdateCheck entity = new UpdateCheck( //
            cursor.getInt(offset + 0), // id
            cursor.getInt(offset + 1), // mid
            cursor.getInt(offset + 2) // sid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UpdateCheck entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setMid(cursor.getInt(offset + 1));
        entity.setSid(cursor.getInt(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(UpdateCheck entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(UpdateCheck entity) {
        return null;
    }

    @Override
    public boolean hasKey(UpdateCheck entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
